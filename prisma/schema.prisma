// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ***** 사용자 테이블 
model User {
  id String @id @default(cuid()) // 문자열, @id 로 사용하며, @default 기본값을 고유하게 cuid 생성
  email String @unique  // 문자열, 고유함 
  username String @unique
  clerkId String @unique  // clerk 을 참조하는 id 
  name String?  // 전체 이름, 없어도됨
  bio String?  // 자서전, 없어도됨
  image String?  // 이미지, 없어도됨
  location String?  // 위치, 없어도됨
  website String? // 웹사이트, 없어도됨
  createdAt DateTime @default(now()) // 2020년 이후 
  updatedAt DateTime @updatedAt  // 업데이트 시간 

  // 관계 설정 
  posts Post[]  // posts 필드는 Post 테이블과 one-to-many, 사용자는 여러개의 게시물 작성 가능 
  comments Comment[]  // comments 필드는 Comment 테이블과 one-to-many
  likes Like[]  // likes 필드는 Like 테이블과 one-to-many 
  
  followers Follows[] @relation("following") // many-to-many, 나를 팔로우하는 사람들, 이 필드가 Follows 테이블에서 following 관계라는 의미 
  following Follows[] @relation("follower")  // many-to-many, 내가 팔로우하는 사람들, 이 필드가 Follows 테이블에서 follower 관계라는 의미 

  notifications Notification[] @relation("userNotifications")  // 사용자가 받는 알림들, 이 필드가 Notification 테이블에서 userNotifications 과 관계
  notificationsCreated Notification[] @relation("notificationCreator") // 사용자가 생성한 알림
}

// ***** 게시물 테이블 
model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now()) // 2020년 이후 
  updatedAt DateTime @updatedAt  // 업데이트 시간   

// 관계 설정 
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade) // 사용자 계정이 삭제될 경우 관련 게시물이 모두 삭제됨 
  comments Comment[]
  likes Like[]
  notifications Notification[]  
}

// ***** 댓글 테이블 
model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  // 관계 설정 
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // composite index for faster queries
}

// ***** 좋아요 테이블 
model Like {
  id        String   @id @default(cuid())
  postId    String                 
  userId    String                 
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // this prevents same user liking post twice
}

// ***** 팔로우 테이블 
model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade) // 팔로우당하는 사용자 삭제시 연관 팔로우도 모두 삭제
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // 검색 속도를 높이기 위해서 2개필드를 조합해서 인덱스를 만듬 
  // 복합 기본 키(composite primary key)를 만들어 각 레코드(행)를 고유하게 식별함, 사용자가 같은 사람을 2번 두번 팔로우 하지 않게 함
  @@id([followerId, followingId]) 
}


// ***** 알림 테이블 
model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}